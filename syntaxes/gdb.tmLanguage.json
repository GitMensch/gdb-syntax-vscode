{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "gdb syntax",
	"patterns": [
		{ "include": "#expression"}
	],
	"repository": {
		"expression": {
			"patterns": [
				{	"include": "#command"	},
				{	"include": "#variable"	},
				{	"include": "#comment"	},
				{   "include": "#strings"	},
				{   "include": "#char"	},
				{   "include": "#numeric"	}
			]
		},
		"command": {
			"patterns": [
				{	"include" : "#command-file" },
				{	"include" : "#command-run" },
				{	"include" : "#command-start" },
				{	"include" : "#command-break" },
				{	"include" : "#command-condition" },
				{	"include" : "#command-ena-disable" },
				{	"include" : "#command-continue" },
				{	"include" : "#command-handle" },
				{	"include" : "#command-watch" },
				{	"include" : "#command-step" },
				{	"include" : "#command-next" },
				{	"include" : "#command-set" },
				{	"include" : "#command-block" },
				{	"include" : "#command-printf" },
				{	"include" : "#command-print" }
			]
		},
		"command-file": {
			"patterns": [
				{
					"name": "meta.file.gdb",
					"match": "^\\s*(fil(?:e)?)\\b(?:\\s+([^\\s]+)?)\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "markup.underline.link.filename.gdb" }
					}
				}
			]
		},
		"command-run": {
			"patterns": [
				{
					"name": "meta.run.gdb",
					"match": "^\\s*(r(?:u(?:n)?)?)\\b(?:\\s+(.+)?)\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "variable.other.arguments.gdb" }
					}
				}
			]
		},
		"command-start": {
			"patterns": [
				{
					"name": "meta.start.gdb",
					"match": "^\\s*(start)\\b(?:\\s+(.+)?)\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "variable.other.arguments.gdb" }
					}
				}
			]
		},
		"command-break": {
			"patterns": [
				{
					"name": "meta.break.gdb",
					"match": "^\\s*(b(?:r(?:e(?:a(?:k)?)?)?)?)\\b(?:\\s+([^\\s]+)\\s*(?:\\s+(if)\\s*(.*))?)?\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "markup.underline.link.location.gdb" },
						"3": { "name": "keyword.control.condition.gdb" },
						"4": { "name": "markup.italic.expression.gdb" }

					}
				}
			]
		},
		"command-ena-disable": {
			"patterns": [
				{
					"name": "meta.dis-enable.gdb",
					"match" : "^\\s*((?:en|dis)(?:a(?:b(?:l(?:e)?)?)?)?)(?:\\s+(\\d+|\\B\\$[^\\s]+)\\b(\\s+.*)?)?\\s*$",
					"captures": {
						"1" : { "name" : "keyword.control.command.gdb"	},
						"2" : {	"name" : "entity.name.tag.breakpoint.gdb"	}
					}
				}
			]
		},
		"command-condition": {
			"patterns": [
				{
					"name": "meta.condition.gdb",
					"match" : "^\\s*(cond(?:i(?:t(?:i(?:o(?:n)?)?)?)?)?)(?:\\s+(\\d+|\\B\\$[^\\s]+)\\b(\\s+.*)?)?\\s*$",
					"captures": {
						"1" : { "name": "keyword.control.command.gdb"	},
						"2" : {	"name": "entity.name.tag.breakpoint.gdb"	},
						"3" : { "name": "markup.italic.expression.gdb" }
					}
				}
			]
		},
		"command-continue": {
			"patterns": [
				{
					"name": "meta.continue.gdb",
					"match": "^\\s*(c(?:o(?:n(?:t(?:i(?:n(?:u(?:(?:e)?)?)?)?)?)?)?)?)\\b(?:\\s+(\\d+))?\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "constant.numeric.count.ignore.gdb" }
					}
				}
			]
		},
		"command-handle": {
			"patterns": [
				{
					"name": "meta.handle.gdb",
					"match": "^\\s*(ha(?:n(?:d(?:l(?:e)?)?)?)?)\\s*(?:((?:\\d+\\s*)+|\\d+-\\d+|all|(?:SIG[A-Z]+\\s*)+)\\s*((?:(?:no)?(?:s(?:t(?:o(?:p)?)?)?|pr(?:i(?:n(?:t)?)?)?|pa(?:s)*|i(?:g(?:n(?:o(?:r(?:e)?)?)?)?)?)\\s*)+)?)?\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.class.signals.gdb" },
						"3": { "name": "support.function.handle.keyword.gdb" }
					}
				}
			]
		},
		"command-next": {
			"patterns": [
				{
					"name": "meta.next.gdb",
					"match": "^\\s*(n(?:ext)?)\\b(?:\\s+(\\d+)?)\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "constant.numeric.count.repeat.gdb" }
					}
				}
			]
		},
		"command-step": {
			"patterns": [
				{
					"name": "meta.step.gdb",
					"match": "^\\s*(s(?:tep)?)\\b(?:\\s+(\\d+)?)\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "constant.numeric.count.repeat.gdb" }
					}
				}
			]
		},
		"command-set": {
			"patterns": [
				{ "include": "#command-set-environment" },
				{ "include": "#command-set-variable" },
				{ "include": "#command-set-convenience" }
			]
		},
		"command-set-environment": {
			"patterns": [
				{
					"name": "meta.set.assignment.gdb",
					"match": "^\\s*(set)\\s+(?!var\\s+|\\$)([^\\s]+)\\s*",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.class.environment.gdb" }
					}
				}
			]
		},
		"command-set-variable": {
			"patterns": [
				{
					"name": "meta.set.assignment.gdb",
					"match": "^\\s*(set)\\s+var\\s+([^\\s]+)\\s*=",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "variable.other.variable.gdb" }
					}
				}
			]
		},
		"command-set-convenience": {
			"patterns": [
				{
					"name": "meta.set.assignment.gdb",
					"match": "^\\s*(set)\\s+\\B(\\$[^\\s]+)\\b\\s*=",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "entity.name.tag.convenience.gdb" }
					}
				}
			]
		},
		"command-watch": {
			"patterns": [
				{
					"name": "meta.command.watch.gdb",
					"match": "^\\s*((?:a|r)?wa(?:t(?:c(?:h)?)?)?)\\s+(-l(?:ocation)?\\s+)?(?:([^\\s]+)|\\*\\s*\\([^*]+\\s*\\*\\s*\\)\\s*(0x[0-9a-f]+))\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.function.option.gdb" },
						"3": { "name": "variable.other.variable.gdb" },
						"4": { "name": "variable.other.adress.gdb"}
					}
				}
			]
		},
		"command-printf": {
			"patterns": [
				{
					"name": "meta.command.printf.gdb",
					"match": "^\\s*(printf)",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" }
					}
				}
			]
		},
		"command-print": {
			"patterns": [
				{
					"name": "meta.command.print.gdb",
					"match": "^\\s*(p(?:rint)?)\\b\\s*((?:--.*\\s+)+--)?(\\s*\\/[xdutacfszr])?\\s+(.*)$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb"	},
						"2": { "name": "support.function.print.option.gdb"	},
						"3": { "name": "constant.character.escape.format.gdb"	},
						"4": { "name": "meta.print.expression.gdb"	}
					}
				}
			]
		},
		"command-block": {
			"name": "meta.block.command.gdb",
			"begin": "^\\s*(comm(?:a(?:n(?:d)?)?)?)\\s*((?:(?:\\d+|\\B\\$[^\\s]+\b)\\s*)+)?\\s*$",
			"beginCaptures": {
				"1": { "name": "keyword.control.command.gdb"	},
				"2": { "name" : "entity.name.tag.breakpoint.gdb"	}
			},
			"end": "^\\s*(end)\\s*$",
			"endCaptures": {
				"1": { "name": "keyword.control.end.gdb"}
			},
			"patterns": [
				{ "include": "#expression" }
			]
		},
		"variable": {
			"patterns": [
				{
					"name": "entity.name.tag.convenience.gdb",
					"match": "\\B(\\$[^\\s]+)\\b"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.line.number-sign.gdb",
					"match": "^\\s*#.*$"
				},
				{
					"match": "[^\\s][^#]*(#.*)$",
					"captures": {
						"1" : {	"name": "invalid.comment.gdb" }
					}
				}
			]
		},
		"strings": {
			"name": "string.quoted.double",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.gdb",
					"match": "\\\\."
				},				
				{
					"name": "constant.character.escape.format.gdb",
					"match": "(\\%\\d*\\.?\\d*[cdeEfgGilopsuxXn%]?(?:h[iu]|l[difu]]|LF|ll[idu])?){1}"
				}
			]
		},
		"char": {
			"patterns": [
				{
					"name": "constant.numeric.character",
					"match": "'.'"
				}
			]
		},
		"numeric": {
			"patterns": [
				{
					"name": "constant.numeric.decimal.gdb",
					"match": "(\\b[1-9]\\d*\\b|\\d*\\.\\d*(?:[eE][+-]?\\d+)?|\\d+[eE][+-]?\\d+)"
				},
				{
					"name": "constant.numeric.hexadecimal.gdb",
					"match": "\\b(0x[0-9a-f]+)\\b"
				},
				{
					"name": "constant.numeric.binary.gdb",
					"match": "\\b(0b[01]+)\\b"
				},
				{
					"name": "constant.numeric.octal.gdb",
					"match": "\\b(0[0-7]*)\\b"
				}				
			]
		}
	},
	"scopeName": "source.gdb"
}