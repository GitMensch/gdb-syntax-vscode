{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "gdb syntax",
	"patterns": [
		{ "include": "#expression"}
	],
	"repository": {
		"expression": {
			"patterns": [
				{	"include": "#command" },
				{	"include": "#block" },
				{	"include": "#variable" },
				{	"include": "#comment" },
				{   "include": "#strings" },
				{   "include": "#char" },
				{   "include": "#numeric" }
			]
		},
		"command": {
			"patterns": [
				{
					"name": "meta.file.gdb",
					"match": "^\\s*(fil(?:e)?)\\b(?:\\s+([^\\s]+)?)\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "markup.underline.link.filename.gdb" }
					}
				},
				{
					"name": "meta.run.gdb",
					"match": "^\\s*(r(?:u(?:n)?)?)\\b(?:\\s+(.+)?)\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "variable.other.arguments.gdb" }
					}
				},
				{
					"name": "meta.start.gdb",
					"match": "^\\s*(start)\\b(?:\\s+(.+)?)\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "variable.other.arguments.gdb" }
					}
				},
				{
					"name": "meta.ignore.gdb",
					"match": "^\\s*(ig(?:n(?:o(?:r(?:e)?)?)?)?)\\b\\s+(\\d+|\\$\\w+)\\s+(\\d+)$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "entity.name.tag.breakpoint.gdb" },
						"3": { "name": "constant.numeric.count.ignore.gdb" }
					}
				},
				{
					"name": "meta.break.gdb",
					"match": "^\\s*(t?b(?:r(?:e(?:a(?:k)?)?)?)?)\\b(?:\\s+([^\\s]+)\\s*(?:\\s+(if)\\s*(.*))?)?\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "markup.underline.link.location.gdb" },
						"3": { "name": "keyword.control.condition.gdb" },
						"4": { "name": "markup.italic.expression.gdb" }

					}
				},
				{
					"name": "meta.enable.gdb",
					"match": "^\\s*(en(?:a(?:b(?:l(?:e)?)?)?)?(?:\\s+b(?:r(?:e(?:a(?:k(?:p(?:o(?:i(?:n(?:t(?:s)?)?)?)?)?)?)?)?)?)?)?)(\\s+(?:o(?:n(?:c(?:e)?)?)?|c(?:o(?:u(?:n(?:t)?)?)?)?\\s+\\d+|de(?:l(?:e(?:t(?:e)?)?)?)?)?)?(?:\\s+((?:(?:\\d+|\\$\\w+)\\s*)+))?\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.function.option.gdb" },
						"3": { "name": "entity.name.tag.breakpoint.gdb" }
					}
				},
				{
					"name": "meta.disable.gdb",
					"match": "^\\s*(dis(?:a(?:b(?:l(?:e)?)?)?)?(?:\\s+b(?:r(?:e(?:a(?:k(?:p(?:o(?:i(?:n(?:t(?:s)?)?)?)?)?)?)?)?)?)?)?)(?:\\s+((?:(?:\\d+|\\$\\w+)\\s*)+))?\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "entity.name.tag.breakpoint.gdb" }
					}
				},
				{
					"name": "meta.condition.gdb",
					"match": "^\\s*(cond(?:i(?:t(?:i(?:o(?:n)?)?)?)?)?)(?:\\s+(\\d+|\\B\\$[^\\s]+)\\b(\\s+.*)?)?\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": {	"name": "entity.name.tag.breakpoint.gdb" },
						"3": { "name": "markup.italic.expression.gdb" }
					}
				},
				{
					"name": "meta.continue.gdb",
					"match": "^\\s*(c(?:o(?:n(?:t(?:i(?:n(?:u(?:(?:e)?)?)?)?)?)?)?)?)\\b(?:\\s+(\\d+))?\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "constant.numeric.count.ignore.gdb" }
					}
				},
				{
					"name": "meta.handle.gdb",
					"match": "^\\s*(ha(?:n(?:d(?:l(?:e)?)?)?)?)\\s*(?:((?:\\d+[^-]\\s*|\\$\\w+\\s*|\\d+-\\d+|all|SIG[A-Z]+\\s*)+)+\\s*((?:(?:no)?(?:s(?:t(?:o(?:p)?)?)?|pr(?:i(?:n(?:t)?)?)?|pa(?:s)*|i(?:g(?:n(?:o(?:r(?:e)?)?)?)?)?)\\s*)+)?)?\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.class.signals.gdb" },
						"3": { "name": "support.function.handle.keyword.gdb" }
					}
				},
				{
					"name": "meta.next.gdb",
					"match": "^\\s*(n(?:ext)?)\\b(?:\\s+(\\d+)?)\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "constant.numeric.count.repeat.gdb" }
					}
				},
				{
					"name": "meta.step.gdb",
					"match": "^\\s*(s(?:tep)?)\\b(?:\\s+(\\d+)?)\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "constant.numeric.count.repeat.gdb" }
					}
				},
				{
					"name": "meta.set.program.argument.gdb",
					"match": "^\\s*(set)\\s+(args?)\\s+(.*)\\s*",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.function.option.gdb" },
						"3": { "name": "variable.other.variable.gdb" }
					}
				},
				{
					"name": "meta.set.history.save.gdb",
					"match": "^\\s*(set)\\s+(history)\\s+(save(?:\\s+(?:on|off))?)\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.function.option.gdb" },
						"3": { "name": "variable.other.variable.gdb" }
					}
				},
				{
					"name": "meta.set.auto-load.safe-path.gdb",
					"match": "^\\s*(set)\\s+(auto-load)\\s+(safe-path)(?:\\s+(.*))?\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.function.option.gdb" },
						"3": { "name": "variable.other.variable.gdb" },
						"4": { "name": "markup.underline.link.directories.gdb" }
					}
				},
				{
					"name": "meta.set.auto-load.gdbinit.gdb",
					"match": "^\\s*(set)\\s+(auto-load)\\s+(local-gdbinit(?:\\s+(?:on|off))?)\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.function.option.gdb" },
						"3": { "name": "variable.other.variable.gdb" }
					}
				},
				{
					"name": "meta.set.auto-load.python.gdb",
					"match": "^\\s*(set)\\s+(auto-load)\\s+(python-scripts(?:\\s+(?:on|of(?:f)?|.*))?)\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.function.option.gdb" },
						"3": { "name": "variable.other.variable.gdb" }
					}
				},
				{
					"name": "meta.set.logging.gdb",
					"match": "^\\s*(set)\\s+(lo(?:g(?:g(?:i(?:n(?:g)?)?)?)?)?)(?:\\s+(on|of(?:f)?)(?:\\s+(.*))?)?\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.function.option.gdb" },
						"3": { "name": "variable.other.variable.gdb" },
						"4": { "name": "markup.underline.link.filename.gdb" }
					}
				},
				{
					"name": "meta.set.logging.file.gdb",
					"match": "^\\s*(set)\\s+(lo(?:g(?:g(?:i(?:n(?:g)?)?)?)?)?)\\s+(f(?:i(?:l(?:e)?)?)?)\\s+(.*)\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.function.option.gdb" },
						"3": { "name": "variable.other.variable.gdb" },
						"4": { "name": "markup.underline.link.filename.gdb" }
					}
				},
				{
					"name": "meta.set.logging.overwrite.gdb",
					"match": "^\\s*(set)\\s+(lo(?:g(?:g(?:i(?:n(?:g)?)?)?)?)?)\\s+(ov(?:e(?:r(?:w(?:r(?:i(?:t(?:e)?)?)?)?)?)?)?(?:\\s+(on|of(?:f)?))?)\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.function.option.gdb" },
						"3": { "name": "variable.other.variable.gdb" }
					}
				},
				{
					"name": "meta.set.pagination.gdb",
					"match": "^\\s*(set)\\s+(pa(?:g(?:i(?:n(?:a(?:t(?:i(?:o(?:n)?)?)?)?)?)?)?)?)(?:\\s+(on|of(?:f)?))?\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.function.option.gdb" },
						"3": { "name": "variable.other.variable.gdb" }
					}
				},
				{
					"name": "meta.set.assignment.program.gdb",
					"match": "^\\s*(set)\\s+(var(?:i(?:a(?:b(?:l(?:e)?)?)?)?)?)\\s+([^\\s]+)\\s*=",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.function.option.gdb" },
						"3": { "name": "variable.other.variable.gdb" }
					}
				},
				{
					"name": "meta.set.assignment.convenience.gdb",
					"match": "^\\s*(set)\\s+\\B(\\$[^\\s]+)\\b\\s*=",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "entity.name.tag.convenience.gdb" }
					}
				},
				{
					"name": "meta.command.watch.gdb",
					"match": "^\\s*((?:a|r)?wa(?:t(?:c(?:h)?)?)?)\\s+(-l(?:ocation)?\\s+)?(?:([^\\s]+)|\\*\\s*\\([^*]+\\s*\\*\\s*\\)\\s*(0x[0-9a-f]+|\\$\\w+))\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.function.option.gdb" },
						"3": { "name": "variable.other.variable.gdb" },
						"4": { "name": "variable.other.adress.gdb"}
					}
				},
				{
					"name": "meta.command.source.gdb",
					"match": "^\\s*(so(?:u(?:r(?:c(?:e)?)?)?)?)\\s+((?:-(?:s|v)\\s+)+)?(.*)\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.function.option.gdb" },
						"3": { "name": "markup.underline.link.filename.gdb" }
					}
				},
				{
					"name": "meta.command.printf.gdb",
					"match": "^\\s*(printf)",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" }
					}
				},
				{
					"name": "meta.command.delete.gdb",
					"match": "^\\s*(d(?:el(?:e(?:t(?:e)?)?)?)?)(?:\\s+b(?:r(?:e(?:a(?:k(?:p(?:o(?:i(?:n(?:t(?:s)?)?)?)?)?)?)?)?)?)?)?(?:\\s+((?:(?:\\d+|\\$\\w+)\\s*)+))?\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "entity.name.tag.breakpoint.gdb" }
					}
				},
				{
					"name": "meta.command.print.gdb",
					"match": "^\\s*(p(?:rint)?)\\b\\s*((?:--.*\\s+)+--)?(\\s*\\/[xdutacfszr])?\\s+",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "support.function.print.option.gdb" },
						"3": { "name": "constant.character.escape.format.gdb" }
					}
				},
				{
					"name": "meta.command.echo.gdb",
					"match": "^\\s*(ec(?:h(?:o)?)?)\\s*(.*)\\s*$",
					"captures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "string.quoted.double" }
					}
				}
			]
		},
		"block": {
			"patterns": [
				{
					"name": "meta.block.command.gdb",
					"begin": "^\\s*(comm(?:a(?:n(?:d)?)?)?)\\s*(?:\\s+((?:(?:\\d+|\\$\\w+)\\s*)+))+\\s*$",
					"beginCaptures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name": "entity.name.tag.breakpoint.gdb" }
					},
					"end": "^\\s*(end)\\s*$",
					"endCaptures": {
						"1": { "name": "keyword.control.end.gdb"}
					},
					"patterns": [
						{ "include": "#expression" }
					]
				},
				{
					"name": "meta.block.conditional.gdb",
					"begin": "^\\s*(if)\\s+(.+)\\s*$",
					"beginCaptures": {
						"1": { "name": "keyword.control.command.gdb" },
						"2": { "name":	"markup.italic.expression.gdb" }
					},
					"end": "^\\s*(end)\\s*$",
					"endCaptures": {
						"1": { "name": "keyword.control.end.gdb"}
					},
					"patterns": [
						{ "include": "#expression" },
						{ 
							"match": "^\\s*(else)\\s*$",
							"captures": {
								"1": { "name": "keyword.control.command.gdb" }							}
						}
					]
				},
				{
					"name": "meta.embedded.python.gdb",
					"begin": "^\\s*(py(?:thon)?)\\s*$",
					"beginCaptures": {
						"1": { "name": "keyword.control.command.gdb" }
					},
					"end": "^\\s*(end)\\s*$",
					"endCaptures": {
						"1": { "name": "keyword.control.end.gdb"}
					},
					"patterns": [
						{
							"include": "source.python"
						}
					]
				}
			]
		},
		"variable": {
			"patterns": [
				{
					"name": "entity.name.tag.convenience.gdb",
					"match": "\\B(\\$[^\\s]+)\\b"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.line.number-sign.gdb",
					"match": "^\\s*#.*$"
				},
				{
					"match": "[^\\s][^#]*(#.*)$",
					"captures": {
						"1": {	"name": "invalid.comment.gdb" }
					}
				}
			]
		},
		"strings": {
			"name": "string.quoted.double",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.gdb",
					"match": "\\\\."
				},				
				{
					"name": "constant.character.escape.format.gdb",
					"match": "(\\%\\d*\\.?\\d*(?:[cdeEfgGilopsuxXn%]?|(?:h[iu]|l[difu]]|LF|ll[idu])?)){1}"
				}
			]
		},
		"char": {
			"patterns": [
				{
					"name": "constant.numeric.character",
					"match": "'.'"
				}
			]
		},
		"numeric": {
			"patterns": [
				{
					"name": "constant.numeric.decimal.gdb",
					"match": "(\\b[1-9]\\d*\\b|\\d*\\.\\d*(?:[eE][+-]?\\d+)?|\\d+[eE][+-]?\\d+)"
				},
				{
					"name": "constant.numeric.hexadecimal.gdb",
					"match": "\\b(0x[0-9a-f]+)\\b"
				},
				{
					"name": "constant.numeric.binary.gdb",
					"match": "\\b(0b[01]+)\\b"
				},
				{
					"name": "constant.numeric.octal.gdb",
					"match": "\\b(0[0-7]*)\\b"
				}				
			]
		}
	},
	"scopeName": "source.gdb"
}